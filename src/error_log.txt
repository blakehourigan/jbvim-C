=================================================================
==69728==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7b2992700627 at pc 0x55c72cbb9247 bp 0x7ffead248e20 sp 0x7ffead248e10
WRITE of size 1 at 0x7b2992700627 thread T0
    #0 0x55c72cbb9246 in tui_draw_mode tui/tui.c:135
    #1 0x55c72cbb975f in tui_refresh tui/tui.c:185
    #2 0x55c72cbb6a4c in handle_normal_mode /home/blake/Documents/Github/jbvim-C/src/main.c:100
    #3 0x55c72cbb76d3 in main /home/blake/Documents/Github/jbvim-C/src/main.c:230
    #4 0x7f2994c27674  (/usr/lib/libc.so.6+0x27674) (BuildId: 4fe011c94a88e8aeb6f2201b9eb369f42b4a1e9e)
    #5 0x7f2994c27728 in __libc_start_main (/usr/lib/libc.so.6+0x27728) (BuildId: 4fe011c94a88e8aeb6f2201b9eb369f42b4a1e9e)
    #6 0x55c72cbb62f4 in _start (/home/blake/Documents/Github/jbvim-C/src/jbvim+0x32f4) (BuildId: 32d97bce57df573c45a49da967d46282a6187278)

Address 0x7b2992700627 is located in stack of thread T0 at offset 39 in frame
    #0 0x55c72cbb8d49 in tui_draw_mode tui/tui.c:117

  This frame has 4 object(s):
    [32, 39) 'mode_str' (line 120) <== Memory access at offset 39 overflows this variable
    [64, 71) 'str' (line 123)
    [96, 103) 'str' (line 128)
    [128, 136) 'str' (line 133)
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-overflow tui/tui.c:135 in tui_draw_mode
Shadow bytes around the buggy address:
  0x7b2992700380: f5 f5 f5 f5 00 00 00 00 00 00 00 00 00 00 00 00
  0x7b2992700400: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x7b2992700480: f5 f5 f5 f5 00 00 00 00 00 00 00 00 00 00 00 00
  0x7b2992700500: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x7b2992700580: f5 f5 f5 f5 00 00 00 00 00 00 00 00 00 00 00 00
=>0x7b2992700600: f1 f1 f1 f1[07]f2 f2 f2 07 f2 f2 f2 07 f2 f2 f2
  0x7b2992700680: 00 f3 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00
  0x7b2992700700: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7b2992700780: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7b2992700800: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7b2992700880: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==69728==ABORTING
=================================================================
==69756==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7b80b0b00227 at pc 0x561a03495247 bp 0x7ffcfe27d160 sp 0x7ffcfe27d150
WRITE of size 1 at 0x7b80b0b00227 thread T0
    #0 0x561a03495246 in tui_draw_mode tui/tui.c:135
    #1 0x561a0349575f in tui_refresh tui/tui.c:185
    #2 0x561a03492a4c in handle_normal_mode /home/blake/Documents/Github/jbvim-C/src/main.c:100
    #3 0x561a034936d3 in main /home/blake/Documents/Github/jbvim-C/src/main.c:230
    #4 0x7f80b3027674  (/usr/lib/libc.so.6+0x27674) (BuildId: 4fe011c94a88e8aeb6f2201b9eb369f42b4a1e9e)
    #5 0x7f80b3027728 in __libc_start_main (/usr/lib/libc.so.6+0x27728) (BuildId: 4fe011c94a88e8aeb6f2201b9eb369f42b4a1e9e)
    #6 0x561a034922f4 in _start (/home/blake/Documents/Github/jbvim-C/src/jbvim+0x32f4) (BuildId: 32d97bce57df573c45a49da967d46282a6187278)

Address 0x7b80b0b00227 is located in stack of thread T0 at offset 39 in frame
    #0 0x561a03494d49 in tui_draw_mode tui/tui.c:117

  This frame has 4 object(s):
    [32, 39) 'mode_str' (line 120) <== Memory access at offset 39 overflows this variable
    [64, 71) 'str' (line 123)
    [96, 103) 'str' (line 128)
    [128, 136) 'str' (line 133)
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-overflow tui/tui.c:135 in tui_draw_mode
Shadow bytes around the buggy address:
  0x7b80b0afff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7b80b0b00000: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x7b80b0b00080: f5 f5 f5 f5 f5 f5 f5 f5 00 00 00 00 00 00 00 00
  0x7b80b0b00100: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x7b80b0b00180: f5 f5 f5 f5 00 00 00 00 00 00 00 00 00 00 00 00
=>0x7b80b0b00200: f1 f1 f1 f1[07]f2 f2 f2 07 f2 f2 f2 07 f2 f2 f2
  0x7b80b0b00280: 00 f3 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00
  0x7b80b0b00300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7b80b0b00380: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7b80b0b00400: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7b80b0b00480: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==69756==ABORTING
